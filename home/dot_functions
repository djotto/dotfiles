# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Use Git’s colored diff (see also `git compare` alias)
function diff() {
  git diff --no-index "$@";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip=$(ipconfig getifaddr en1);
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
  if grep -q Microsoft /proc/version; then
    # Ubuntu on Windows using the Linux subsystem
    alias open='explorer.exe';
  else
    alias open='xdg-open';
  fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Function to map color names and modifiers to LS_COLORS codes
# get_color_ls 'red' 'black' 'bold underlined'
# get_color_ls 'red' '' 'bold'
# get_color_ls
get_color_ls() {
  local foreground=$1
  local background=$2
  local -a modifiers=(${3// / })
  local result=""

  for modifier in "${modifiers[@]}"; do
    case "$modifier" in
      bold)       result+="01;";;
      dim)        result+="02;";;
      underlined) result+="04;";;
      blink)      result+="05;";;
      reverse)    result+="07;";;
      hidden)     result+="08;";;
    esac
  done

  case "$foreground" in
    black)   result+="30;" ;;
    red)     result+="31;" ;;
    green)   result+="32;" ;;
    yellow)  result+="33;" ;;
    blue)    result+="34;" ;;
    magenta) result+="35;" ;;
    cyan)    result+="36;" ;;
    white)   result+="37;" ;;
    *)       result+="" ;;
  esac

  # Handling background colors
  case "$background" in
    black)   result+="40;" ;;
    red)     result+="41;" ;;
    green)   result+="42;" ;;
    yellow)  result+="43;" ;;
    blue)    result+="44;" ;;
    magenta) result+="45;" ;;
    cyan)    result+="46;" ;;
    white)   result+="47;" ;;
    *)       result+="" ;;
  esac

  result="${result%;}" # strip trailing semicolon
  [ -n "$result" ] || result="00"

  echo "$result"
}

# Wrap ddev to emulate git-style aliases
ddev() {
  if [ "$1" == "info" ]; then
    shift
    command ddev describe "$@"
  else
    command ddev "$@"
  fi
}

# Wrap git to catch uses of --force
git() {
  for arg in "$@"; do
    if [[ "$arg" == "--force" ]]; then
      echo "'--force-with-lease' is preferred to avoid overwriting upstream changes."
      read -p "Are you sure you want to proceed with '--force'? (yes/no): " choice
      if [[ "$choice" != "yes" ]]; then
        echo "Operation aborted."
        return 1
      fi
      break
    fi
  done

  # Pass all arguments to the actual git command
  command git "$@"
}
